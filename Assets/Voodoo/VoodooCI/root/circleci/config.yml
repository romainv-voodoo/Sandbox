# Auto Generated: Do Not Modify by hand
version: 2.1
orbs:
  aws-s3: circleci/aws-s3@3.0

parameters:
  upload-comment:
    type: string
    default: "[Auto Build on main branch]"
  unity-project-path:
    type: string
    default: "./"
  s3-build-number-folder:
    type: string
    default: "CasualBaseGame"
  deployment-type:
    type: string
    default: "debug"
  enable-test:
    type: boolean
    default: false
  enable-editmode-test:
    type: boolean
    default: true
  enable-playmode-test:
    type: boolean
    default: false
  enable-caching:
    type: boolean
    default: true
  project-version:
    type: string
    default: "2.1"
  artifact-name:
    type: string
    default: "CasualBaseGame"
  empty-pr-name:
    type: string
    default: $CIRCLE_PULL_REQUEST
# Android parameters
  manual-trigger-android-deployment:
    type: boolean
    default: false
  game-ci-version-android:
    type: string
    default: "vengadores/2020.3.21f1:1.3"
  android-increment-bundle:
    type: boolean
    default: false
  android-keystore:
    type: string
    default: "casualbasegame_key.keystore"

# IOS Parameters  
  manual-trigger-ios:
    type: boolean
    default: false
  manual-trigger-ios-testflight:
    type: boolean
    default: false    
  game-ci-version-ios:
    type: string
    default: "vengadores/2020.3.21f1:1.3"
  apple-team-context:
    type: string
    default: "VENGADORES_CI_GUMBUG"
  apple-team-id:
    type: string
    default: "H2M4453WZZ"

  # Version Parameters
  sync-version:
    type: boolean
    default: false
  s3-folder:
    type: string
    default: "S3Folder"
  download-version-file:
    type: boolean
    default: false
  upload-version-file:
    type: boolean
    default: false
  version-file:
    type: string
    default: ""

jobs:
  ##### Gets called on every push
  on_push_successful:
    docker:
      - image: alpine:3.13.6
    resource_class: small
    steps:
      - run:
          name: Success Message!
          command: echo "Push was successful to ${CIRCLE_BRANCH}"

##### Shows all the necessary messages for debug steps ####
  build_message_android:
    docker:
      - image: alpine:3.13.6
    resource_class: small
    steps:
      - run:
          name: Branch Name
          command: echo ${CIRCLE_BRANCH}
      - run:
          name: Upload Comment
          command: echo "<< pipeline.parameters.upload-comment >>"
      - run:
          name: Deployment Type
          command: echo << pipeline.parameters.deployment-type >>
      
      - run:
          name: Manual Trigger Deployment Value (Build with Firebase Deployment)
          command: echo << pipeline.parameters.manual-trigger-android-deployment >>
      - run:
          name: Comment
          command: echo << pipeline.parameters.upload-comment >>
      - run:
          name: S3 Bucket Folder
          command: echo << pipeline.parameters.s3-build-number-folder >>
      - run:
          name: Unity Project path
          command: echo << pipeline.parameters.unity-project-path >>
      - run:
          name: Increment Build Number?
          command: echo << pipeline.parameters.android-increment-bundle >>
      - run:
          name: Android Project Version
          command: echo << pipeline.parameters.project-version >>

##### Builds android ####
  build_unity_android: 
    docker:
      - image: << pipeline.parameters.game-ci-version-android >>
    resource_class: xlarge
    steps:
      ## Constants ##
      - run: echo "export ARTIFACT_NAME=<< pipeline.parameters.artifact-name >>" >> $BASH_ENV
      - run: echo "export ARTIFACT_DIRECTORY=${ARTIFACT_NAME}_andriod" >> $BASH_ENV
      - run: echo "export DEPLOYMENT_TYPE=<< pipeline.parameters.deployment-type >>" >> $BASH_ENV
      - run: echo "export UNITY_PROJECT_PATH=<< pipeline.parameters.unity-project-path >>" >> $BASH_ENV
      - run: |
          java -version
          java -jar /opt/bundletool.jar version
      
      ######## Checkout Repo #######
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      ######## Download additional CI tools tools #######
      - run: chmod +x VoodooCI/common/tools_downloader.sh && VoodooCI/common/tools_downloader.sh
      #################### Get Current Build Number from S3 #####################
      - run:
          name: Get the build number from S3
          command: |
            S3_BUCKET="s3://voodoo-casual-xcode-builds/_BuildVersionCodes/<< pipeline.parameters.s3-build-number-folder >>"
            aws s3 sync $S3_BUCKET ProjectVersion
      - run: cat ProjectVersion/ProjectVersion.json
      - run: echo "export PROJECT_VERSION='$(cat ProjectVersion/ProjectVersion.json)'" >> $BASH_ENV
      - run: echo "$PROJECT_VERSION"
      #### Get License + Build + Release License ########

      - when:
          condition: << pipeline.parameters.enable-caching >>
          steps:
          - restore_cache:
              keys:
                - << pipeline.parameters.artifact-name >>_android-build-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Branch }}-{{ .Revision }}

      - run:
          name: Get random licence
          command: chmod +x VoodooCI/common/fetch_license.sh && VoodooCI/common/fetch_license.sh $BASH_ENV
      - run: cat $BASH_ENV
      
      - run:
          name: Deactivate Unity license if taken
          command: unity-editor -username "${UNITY_USERNAME}" -password "${UNITY_PASSWORD}" -serial "${UNITY_SERIAL}" -batchmode -nographics -returnlicense -quit || echo "Seat is free."
      
      - run:
          name: Create License File
          command: chmod +x VoodooCI/common/ci_create_license.sh && VoodooCI/common/ci_create_license.sh
      # Run tests          
      - when:
          condition: << pipeline.parameters.enable-test >>
          steps:
          - run:
              name: Running Tests. Test results will be availabe in Artifacts tab
              command: | 
                chmod +x VoodooCI/common/unit_tests/unit_tests.sh
                VoodooCI/common/unit_tests/unit_tests.sh << pipeline.parameters.enable-editmode-test >> << pipeline.parameters.enable-playmode-test >>
          - store_artifacts:
              path: editmode_result.zip
              destination: Tests/editmode_result.zip
          - store_artifacts:
              path: playmode_result.zip
              destination: Tests/playmode_result.zip
          - run: ls -R VoodooCI/common/unit_tests/
          - run:
              name: Approve Builds
              command: chmod +x VoodooCI/common/unit_tests/approve_builds.sh && VoodooCI/common/unit_tests/approve_builds.sh

      - run: 
          name: Build Unity
          command: chmod +x VoodooCI/common/ci_build_android.sh && VoodooCI/common/ci_build_android.sh

      - run:
          name: Deactivate Unity license
          command: unity-editor -batchmode -nographics -returnlicense -quit
          when: always
      - run:
          name: check folders after build
          command: ls -R
      - when:
          condition: << pipeline.parameters.enable-caching >>
          steps:
          - save_cache:
                key: << pipeline.parameters.artifact-name >>_android-build-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Branch }}-{{ .Revision }}
                paths:
                    - Library
    #################### Increment Build Number when on successful release #####################        
      - run: cat ProjectVersion/ProjectVersion.json
      - when:
          condition: << pipeline.parameters.android-increment-bundle >>
          steps:
            - run:
                name: Update Project Version Information On Success
                command: |
                  PROJECT_VERSION_UPDATED=$(cat ProjectVersion/ProjectVersion.json)
                  S3_BUCKET="s3://voodoo-casual-xcode-builds/_BuildVersionCodes/<< pipeline.parameters.s3-build-number-folder >>"
                  chmod +x VoodooCI/common/version_update/version_update.sh && VoodooCI/common/version_update/version_update.sh $PROJECT_VERSION_UPDATED $S3_BUCKET
                when: on_success

      - run: echo "Android Project version << pipeline.parameters.project-version >> and Bundle version code ${ANDROID_BUNDLE_CODE}"
      - store_artifacts: 
          path: << pipeline.parameters.unity-project-path >><< pipeline.parameters.artifact-name >>-symbols.zip
          destination: << pipeline.parameters.artifact-name >>-symbols-<< pipeline.parameters.deployment-type >>-<< pipeline.parameters.project-version >>.zip
      - store_artifacts:
          path: << pipeline.parameters.unity-project-path >><< pipeline.parameters.artifact-name >>.aab
          destination: << pipeline.parameters.artifact-name >>-<< pipeline.parameters.deployment-type >>-<< pipeline.parameters.project-version >>.aab
      - run: 
          name: Make apk file with bundle tool
          command: |
            AAB_FILE=<< pipeline.parameters.unity-project-path >><< pipeline.parameters.artifact-name >>.aab
            java -jar /opt/bundletool.jar build-apks --mode universal --bundle $AAB_FILE --output my_app.apks --ks=<< pipeline.parameters.unity-project-path >><< pipeline.parameters.android-keystore >> --ks-pass=pass:$ANDROID_KEYSTORE_PASS --ks-key-alias=$ANDROID_KEYSTORE_ALIAS --key-pass=pass:$ANDROID_KEYSTORE_ALIAS_PASS

      - run: ls -R
      - run: unzip my_app.apks
      - run: ls -R
      - store_artifacts:
          path: universal.apk
          destination: << pipeline.parameters.artifact-name >>-<< pipeline.parameters.deployment-type >>-<< pipeline.parameters.project-version >>.apk

      - run:
          name: Create artifacts folder
          command: |
            mkdir ./artifacts
            cd artifacts
            mkdir ${ARTIFACT_DIRECTORY}_${CIRCLE_WORKFLOW_ID}
      - run:
          name: Copy artifact to folder
          command: |
            DESTINATION=./artifacts/${ARTIFACT_DIRECTORY}_${CIRCLE_WORKFLOW_ID}
            cp -R VoodooCI/android/. $DESTINATION
            cp universal.apk $DESTINATION
      #################### Sync Artifacts to S3 #####################
      - run: aws s3 sync artifacts s3://voodoo-casual-xcode-builds/

#************* Firebase deploy job **************
  firebase_deploy:
    docker:
      - image: fastlanetools/ci:0.4.0
    steps:
      ####### Set up ENV variables ########
      - run: echo "export ARTIFACT_DIRECTORY=<< pipeline.parameters.artifact-name >>_andriod" >> $BASH_ENV
      ######## Add additional libraries to Ubuntu #######
      - run: 
          name: insall aws cli
          command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
      - run: curl -sL https://firebase.tools | bash
      
      - run: aws s3 cp s3://voodoo-casual-xcode-builds/${ARTIFACT_DIRECTORY}_${CIRCLE_WORKFLOW_ID}/ . --acl private --cache-control "max-age=86400" --recursive
      - run: ls -R
      - run: sudo gem install bundler
      - run: bundle install
      - run:
          name: "Deploy build to Firebase"
          command: |
            NOTE=${CIRCLE_BRANCH}_"<< pipeline.parameters.upload-comment >>"
            touch release-note.txt
            echo $NOTE > release-note.txt
            bundle exec fastlane publish_to_firebase branch:${CIRCLE_BRANCH} app_id:$FIREBASE_APP_ID firebase_token:$FIREBASE_TOKEN artifact_name:universal.apk

##### IOS Shows all the necessary messages for debug steps ####
  build_message_ios:
    docker:
      - image: alpine:3.13.6
    resource_class: small
    steps:
      - run:
          name: Branch Name
          command: echo ${CIRCLE_BRANCH}
      - run:
          name: Upload Comment
          command: echo "<< pipeline.parameters.upload-comment >>"
      - run:
          name: manual-trigger-ios
          command: echo << pipeline.parameters.manual-trigger-ios >>
      - run:
          name: Should publish to testflight? (manual-trigger-ios-testflight)
          command: echo << pipeline.parameters.manual-trigger-ios-testflight >>
      - run:
          name: artifact-name
          command: echo << pipeline.parameters.artifact-name >>
      - run:
          name: Folder path of Unity Project
          command: echo << pipeline.parameters.unity-project-path >>

# *************** IOS BUILD Steps **********************
  build_unity_ios_gameci: 
    docker:
      - image: << pipeline.parameters.game-ci-version-ios >>
    resource_class: xlarge
    steps:
      - run: echo "export ARTIFACT_NAME=<< pipeline.parameters.artifact-name >>" >> $BASH_ENV
      - run: echo "export ARTIFACT_DIRECTORY=${ARTIFACT_NAME}_ios_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      - run: echo "export DEPLOYMENT_TYPE=<< pipeline.parameters.deployment-type >>" >> $BASH_ENV
      - run: echo "export UNITY_PROJECT_PATH=<< pipeline.parameters.unity-project-path >>" >> $BASH_ENV
      - run: echo "export APPLE_TEAM_ID=<< pipeline.parameters.apple-team-id >>" >> $BASH_ENV
      
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      ######## Download additional CI tools tools #######
      - run: chmod +x VoodooCI/common/tools_downloader.sh && VoodooCI/common/tools_downloader.sh

    #################### Get Current Build Number from S3 #####################
      - run:
          name: Get the build number from S3
          command: |
            S3_BUCKET="s3://voodoo-casual-xcode-builds/_BuildVersionCodes/<< pipeline.parameters.s3-build-number-folder >>"
            aws s3 sync $S3_BUCKET ProjectVersion
      - run: cat ProjectVersion/ProjectVersion.json
      - run: echo "export PROJECT_VERSION='$(cat ProjectVersion/ProjectVersion.json)'" >> $BASH_ENV
      - run: echo "$PROJECT_VERSION"
    #################### Licence + Build + Release License #####################
      - when:
          condition: << pipeline.parameters.enable-caching >>
          steps:
          - restore_cache:
              keys:
                - << pipeline.parameters.artifact-name >>_ios-build-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Get random licence
          command: chmod +x VoodooCI/common/fetch_license.sh && VoodooCI/common/fetch_license.sh $BASH_ENV
      - run: cat $BASH_ENV
      - run: 
          name: Check folders before build
          command: ls -R
      - run:
          name: Deactivate Unity license if taken
          command: unity-editor -username "${UNITY_USERNAME}" -password "${UNITY_PASSWORD}" -serial "${UNITY_SERIAL}" -batchmode -nographics -returnlicense -quit || echo "Seat is free."
      
      - run:
          name: Create License File
          command: chmod +x VoodooCI/common/ci_create_license.sh && VoodooCI/common/ci_create_license.sh

      # Run tests          
      - when:
          condition: << pipeline.parameters.enable-test >>
          steps:
          - run:
              name: Running Tests. Test results will be availabe in Artifacts tab
              command: | 
                chmod +x VoodooCI/common/unit_tests/unit_tests.sh
                VoodooCI/common/unit_tests/unit_tests.sh << pipeline.parameters.enable-editmode-test >> << pipeline.parameters.enable-playmode-test >>
          - store_artifacts:
              path: editmode_result.zip
              destination: Tests/editmode_result.zip
          - store_artifacts:
              path: playmode_result.zip
              destination: Tests/playmode_result.zip
          - run: ls -R VoodooCI/common/unit_tests/
          - run:
              name: Approve Builds
              command: chmod +x VoodooCI/common/unit_tests/approve_builds.sh && VoodooCI/common/unit_tests/approve_builds.sh
      
      - run: 
          name: Build Unity
          command: chmod +x VoodooCI/common/ci_build_ios.sh && VoodooCI/common/ci_build_ios.sh
          no_output_timeout: 120m
      - run:
          name: Deactivate Unity license
          command: unity-editor -batchmode -nographics -returnlicense -quit
          when: always
      - when:
          condition: << pipeline.parameters.enable-caching >>
          steps:
          - save_cache:
              key: << pipeline.parameters.artifact-name >>_ios-build-{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Branch }}-{{ .Revision }}
              paths:
                  - Library
    ##### Increment build number on success
      - run: cat ProjectVersion/ProjectVersion.json
      - run:
          name: Update Project Version Information On Success
          command: |
              PROJECT_VERSION_UPDATED=$(cat ProjectVersion/ProjectVersion.json)
              S3_BUCKET="s3://voodoo-casual-xcode-builds/_BuildVersionCodes/<< pipeline.parameters.s3-build-number-folder >>"
              chmod +x VoodooCI/common/version_update/version_update.sh && VoodooCI/common/version_update/version_update.sh $PROJECT_VERSION_UPDATED $S3_BUCKET
          when: on_success
      - run: 
          name: Check folders after build
          command: ls -R
      - run: 
          name: Modidy Podfile with CDN
          command: |
            mcs VoodooCI/ios/CocoapodChangeUrl.cs -out:VoodooCI/ios/CocoapodChangeUrl.exe
            chmod +x VoodooCI/ios/CocoapodChangeUrl.exe
            mono VoodooCI/ios/CocoapodChangeUrl.exe
    ############ Store Build, Gem, Gemlock to S3 artifact ##########
      - run: zip -r ios.zip  << pipeline.parameters.unity-project-path >>./Builds/ios
      - run:
          name: Create artifacts folder
          command: |
            mkdir ./artifacts
            cd artifacts
            mkdir ${ARTIFACT_DIRECTORY}
      - run:
          name: Copy artifact to folder
          command: |
            DESTINATION=./artifacts/${ARTIFACT_DIRECTORY}
            cp -R ./VoodooCI/ios/. $DESTINATION
            mv ./ios.zip $DESTINATION
      - run: aws s3 sync artifacts s3://voodoo-casual-xcode-builds/

# ******** BUILD IOS FASTLANE *************** 
  build_fastlane-ios:
    macos:
      xcode: "13.0.0"
    resource_class: medium
    parameters:
          build-type:
            type: string
            default: "distribution"
    steps:
      ###### SET ENV Variables #####
      - run: echo "export ARTIFACT_NAME=<< pipeline.parameters.artifact-name >>" >> $BASH_ENV
      - run: echo "export ARTIFACT_FILE='${ARTIFACT_NAME}_<< pipeline.parameters.deployment-type >>.ipa'" >> $BASH_ENV
      - run: echo "export ARTIFACT_DIRECTORY=${ARTIFACT_NAME}_ios_${CIRCLE_WORKFLOW_ID}" >> $BASH_ENV
      - run: 
          name: Making PodCache Directory
          command:  echo "export CP_HOME_DIR=PodCacheDir" >> $BASH_ENV
      - run :  |
          mkdir FastLaneLog
          echo "export FL_OUTPUT_DIR=FastLaneLog" >> $BASH_ENV
        
      - run: echo $ARTIFACT_FILE
      ###### GET Files from S3 ########
      - run: mkdir downloads
      - aws-s3/sync:
          arguments: |
            --acl private \
            --cache-control "max-age=86400"
          from: s3://voodoo-casual-xcode-builds/${ARTIFACT_DIRECTORY}
          to: downloads
      ###### Setting up the workspace ########          
      - run: ls -R
      - run: cp -R downloads/ .
      - run: unzip ios.zip
      - run: ls -R
      
      - run: mv << pipeline.parameters.unity-project-path >>Builds/ios/* .
      - run: ls -R
      - run:
          name: Install fastlane
          command: sudo gem install fastlane -v 2.4.0
      - run:
          name: Get ssh key to access certificates repository
          command: echo ${GITHUB_SSH_PRIVKEY} | tr ":" "\n" | base64 -D >> ~/.ssh/github_rsa
      - run:
          name: Apply right permissions to rsa key
          command: chmod 0400 ~/.ssh/github_rsa
      - run:
          name: Ensure we use the right ssh key for github access
          command: |
            echo "Host github.com" > ~/.ssh/config
            echo "  StrictHostKeyChecking no" >> ~/.ssh/config
      - run:
          name: Add github to known hosts
          command: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Ensure fastlane is well configured
          command: |
              sed -i'' -e "s#profile: .*,#profile: \"output/Development_${MATCH_APP_IDENTIFIER}.mobileprovision\",#" fastlane/Fastfile
      - run: cat fastlane/Fastfile
      - run:
          name: Patching process_symbols script (see https://forum.unity.com/threads/upload-symbols-to-cloud-diagnostics-when-building-from-command-line.604780/)
          command: sed -i'' -e '8s/.*/echo "WORKAROUND !"/' process_symbols.sh
      - run: 
          name: Copy Pods and unzip from Cache
          command: | 
            POD_SUM=$(shasum Podfile | cut -d' ' -f1)
            echo $POD_SUM
            cp downloads/CopyPodsToCache.sh .
            chmod +x CopyPodsToCache.sh
            ./CopyPodsToCache.sh $POD_SUM
      - run: ls -R PodCacheDir
      - run:
          name: Install cocoapods
          command: pod install
          no_output_timeout: 120m
      - run: 
          name: Try upload Pod Cache
          command: |
            cp downloads/UploadLocalPodToS3.sh .
            POD_SUM=$(shasum Podfile | cut -d' ' -f1)
            chmod +x UploadLocalPodToS3.sh && ./UploadLocalPodToS3.sh $POD_SUM
      - run:
          name: Optimizing build time by disabling usym upload
          command: sed -i'' -e '/USYM_UPLOAD.*/d' Unity-iPhone.xcodeproj/project.pbxproj
      - run:
          name: Optimizing build time by forcing build only for the current arch
          command: sed -i'' -e 's/ONLY_ACTIVE_ARCH = NO;/ONLY_ACTIVE_ARCH = YES;/' Unity-iPhone.xcodeproj/project.pbxproj
      - run:
          name: Optimizing build by enforcing swift optim
          command: |
            sed -i'' -e '/UNITY_SCRIPTING_BACKEND = il2cpp;/a \
            SWIFT_WHOLE_MODULE_OPTIMIZATION = YES;' Unity-iPhone.xcodeproj/project.pbxproj
      - run:
          name: Fixing Helpshift.framework was built for iOS + iOS Simulator
          command: |
            sed -i'' -e '/UNITY_SCRIPTING_BACKEND = il2cpp;/a \
            VALIDATE_WORKSPACE = NO;' Unity-iPhone.xcodeproj/project.pbxproj
      - run:
          name: Create apple API key json
          command: |
            eval "echo \"$(cat fastlane/AppleModel.json)\"" > fastlane/Apple.json
            cat fastlane/Apple.json
      - run:
          name: Run fastlane
          command: |
            fastlane ios << parameters.build-type >>
          no_output_timeout: 120m
      - run: |
          ls FastLaneLog
      - store_artifacts:
          path: FastLaneLog
          destination: FastLaneLog
      - run: cp FastLaneLog/gym/myapp.ipa myapp.ipa
      - store_artifacts:
          path: myapp.ipa
          destination: << pipeline.parameters.artifact-name >>_<< pipeline.parameters.project-version >>_<< pipeline.parameters.deployment-type >>.ipa
      
# Upload to Test flight #####
      - when:
          condition: << pipeline.parameters.manual-trigger-ios-testflight >>
          steps:
            - run: 
                name: Push builds to Test flight
                command: fastlane ios upload_testflight comment:"<< pipeline.parameters.upload-comment >>"
                no_output_timeout: 120m

# VERSION Related jobs              
  build_version_numbers:
    docker:
      - image: amazon/aws-cli
    resource_class: small
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Branch Name
          command: echo ${CIRCLE_BRANCH}

      ###### Upload ProjectVersion.json ########      
      - when:
          condition: << pipeline.parameters.upload-version-file >>
          steps:
            - run:
                name: Creating ProjectVersion.json file
                command: |
                  mkdir Upload
                  cd Upload
                  touch ProjectVersion.json
                  VERSION_VALUE="<< pipeline.parameters.version-file >>"
                  echo ${VERSION_VALUE} >> ProjectVersion.json
            - run: cat Upload/ProjectVersion.json
            - run: aws s3 sync Upload s3://voodoo-casual-xcode-builds/_BuildVersionCodes/<< pipeline.parameters.s3-folder >> --acl private --cache-control "max-age=86400"
            - run: echo "Updated ProjectVersion.json successfully. See the logs to verify the file"
            - store_artifacts:
                path: Upload/ProjectVersion.json
                destination: ProjectVersion.json
      ###### Download ProjectVersion.json ########   
      - when:
          condition: << pipeline.parameters.download-version-file >>
          steps:
            - run:
                name: Downloading ProjectVersion.json and saving as artifact.
                command: aws s3 sync s3://voodoo-casual-xcode-builds/_BuildVersionCodes/<< pipeline.parameters.s3-folder >> Download --acl private --cache-control "max-age=86400"
            - run: cat Download/ProjectVersion.json
            - store_artifacts:
                path: Download/ProjectVersion.json
                destination: ProjectVersion.json
            - run: echo "Download ProjectVersion.json file from Artifacts tab"

### WORKFLOWS ###

workflows:
  version: 2
            
# Manual Build Trigger for Android Builds           
  remote-trigger-android-deployment:
      when: << pipeline.parameters.manual-trigger-android-deployment >>
      jobs:
        - build_message_android
        - build_unity_android:
            context:
                - CI_GAME_LAUNCHER
                - CASUAL_CORE_STAGING
            requires:
              - build_message_android
        - firebase_deploy:
            context:
                - CI_GAME_LAUNCHER
                - CASUAL_CORE_STAGING
            requires: 
              - build_unity_android

# IOS manual triggers
  remote-trigger-ios:         
      when: << pipeline.parameters.manual-trigger-ios >>
      jobs:
        - build_message_ios:
            context:
                - << pipeline.parameters.apple-team-context >>
        - build_unity_ios_gameci:
            context:
                - CI_GAME_LAUNCHER
                - CASUAL_CORE_STAGING
                - << pipeline.parameters.apple-team-context >>
            requires:
              - build_message_ios
        - build_fastlane-ios:
            context:
                - CI_GAME_LAUNCHER
                - CASUAL_CORE_STAGING
                - << pipeline.parameters.apple-team-context >>
            requires: 
              - build_unity_ios_gameci

  # Version Triggers
  sync-project-version:         
      when: << pipeline.parameters.sync-version >>
      jobs:
        - build_version_numbers:
            context:
                - CASUAL_CORE_STAGING

# Auto Build Workflow
  auto_build_workflow:
    when:
      and: # All must be false to trigger
        - equal: [ false, << pipeline.parameters.manual-trigger-ios >> ]
        - equal: [ false, << pipeline.parameters.manual-trigger-android-deployment >> ]
    jobs:
      - build_unity_android:
          context:
            - CI_GAME_LAUNCHER
            - CASUAL_CORE_STAGING

      - build_unity_ios_gameci:
          context:
            - CI_GAME_LAUNCHER
            - CASUAL_CORE_STAGING
            - << pipeline.parameters.apple-team-context >>
      - build_fastlane-ios:
          context:
            - CI_GAME_LAUNCHER
            - CASUAL_CORE_STAGING
            - << pipeline.parameters.apple-team-context >>
          requires:
            - build_unity_ios_gameci            

